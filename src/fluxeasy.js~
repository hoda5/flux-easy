var assert = require("assert");
var recast = require('recast');
var types = recast.types;
var n = types.namedTypes;
var b = types.builders;

function transform_js(source, inputMapFile) {

    var src_ast = recast.parse(source);
    var result_ast = transform_ast(src_ast, inputMapFile);

    if (inputMapFile)
        return recast.print(result_ast);
    else
        return recast.print(result_ast).code;
}

function transform_ast(ast) {

    var FluxEasySpecifier;
    recast.visit(ast, {
        visitImportDeclaration: function (path) {
            var src = path.node.source;
            if (n.Literal.check(src) && src.value == 'flux-easy') {
                var specifiers = path.node.specifiers;
                assert.ok(specifiers.length == 1 &&
                    n.ImportDefaultSpecifier.check(specifiers[0]) &&
                    n.Identifier.check(specifiers[0].id),
                    'TODO: allow rename specifiers');
                path.replace();
                FluxEasySpecifier = specifiers[0].id.name;
                return false;
            }
            this.traverse(path);
        },
        visitClassDeclaration: function (path) {
            if (FluxEasySpecifier) {
                var clazz = path.node;
                var superClazz = clazz.superClass;
                if (n.MemberExpression.check(superClazz) &&
                    n.Identifier.check(superClazz.object) &&
                    n.Identifier.check(superClazz.property) &&
                    superClazz.object.name == FluxEasySpecifier) {
                    if (superClazz.property.name == "Store") {
                        path.replace(transform_Store(clazz));
                        return false;
                    }
                    if (superClazz.property.name == "View") {
                        path.replace(transform_View(clazz));
                        return false;
                    }
                }
            }
            this.traverse(path);
        }
    });
    // assert.ok(FluxEasySpecifier, "Insert import FluxEasy from 'flux-easy' at beginning of source");
    return ast;
}

module.exports = {
    transform_js: transform_js,
    transform_ast: transform_ast
};


function transform_Store(clazz) {

        var fnDestroy = b.functionDeclaration(b.identifier('destroyStore'), [], b.blockStatement([]));
        var fnUnlink = b.functionDeclaration(b.identifier('destroyLink'), [], b.blockStatement([]));

        var obj = b.objectExpression([
        b.property('init', b.identifier('addRef'), fnAddRef())

        // link.oj b.property('init', b.identifier('AddLoggedInlistenner'), fnDestroy),
        //b.property('init', b.identifier('RemoveLoggedInlistenner'), fnDestroy),
    ]);

        var private_vars = b.variableDeclaration('var', [
            b.variableDeclarator(b.identifier('references'), null),
        b.variableDeclarator(b.identifier('instance'), null)
    ]);

        return b.functionDeclaration(clazz.id, [], b.blockStatement([
        private_vars,
    b.returnStatement(obj),
        fnUnlink,
        fnCreate(),
        fnDestroyx
    ]));

        function fnAddRef(fn) {
            return b.functionExpression(b.identifier('addRef'), [b.identifier('dispatcher')], b.blockStatement([
              b.ifStatement(b.unaryExpression('!', b.identifier('instance'), true),
                    b.expressionStatement(b.callExpression(b.identifier('createStoreInstance'), [b.identifier('dispatcher')]))),
              b.variableDeclaration(b.variableDeclarator('var', b.identifier('ref'),
                    b.objectExpression([])
                )), 
            b.returnStatement(b.identifier('instance'))
        ]));
        }


        function fnUnlink(fn) {
            return b.functionExpression(b.identifier('createLink'), [b.identifier('dispatcher')], b.blockStatement([
            b.ifStatement(b.unaryExpression('!', b.updateExpression('++', b.identifier('references'), false), true),
                        b.expressionStatement(b.updateExpression('--', b.identifier('references'), false)),
                        b.ifStatement(b.unaryExpression('!', b.identifier('references')),
                            b.expressionStatement(b.callExpression(b.identifier(fnCreate), [b.identifier('dispatcher')]))),
                        b.returnStatement(b.identifier('instance'));
                        ]));
            }

            function fnCreate() {
                var initialStateObj, initialStateFn;

                var reactClass = b.objectExpression(clazz.body.body.reduce(function (res, member) {
                    if (n.ClassProperty.check(member)) {
                        defineInitialStateFn(res);
                        setInitialState(member.key, b.identifier('undefined'));
                    } else {
                        assert.ok(member.type == n.MethodDefinition);
                        assert.ok(!member.static);
                        if (member.key.name == 'constructor') {
                            defineInitialStateFn(res, member.value.body.body);
                        } else
                            res.push(b.property('init', member.key, member.value));
                    }
                    return res;
                }, []));
                var assign_view = b.expressionStatement(b.assignmentExpression('=', b.identifier('view'),
                    b.callExpression(
                        b.memberExpression(
                            b.identifier('React'),
                            b.identifier('createComponent'), false), [reactClass])));
                return b.functionDeclaration(b.identifier('createView'), [], b.blockStatement([

                    assign_view
                ]));

                function setInitialState(identifier, value) {
                    assert(n.Identifier.check(identifier));
                    for (var i = 0; i < initialStateObj.properties.length; i++) {
                        var p = initialStateObj.properties[i];
                        if (p.key.name == identifier.name) {
                            assert(n.Identifier.check(p.value) && p.value.name == 'undefined');
                            p.value = value;
                            return;
                        }
                    }
                    initialStateObj.properties.push(b.property('init', identifier, value));
                }

                function defineInitialStateFn(res, body) {
                    if (!initialStateFn) {
                        initialStateObj = b.objectExpression([]);

                        initialStateFn = b.functionExpression(b.identifier('getInitialState'), [],
                            b.blockStatement([
                    var private_vars = b.variableDeclaration('var', [
                       b.variableDeclarator(b.identifier('state'), initialStateObj)
                    ]);
                    b.returnStatement(initialStateObj)]));

                        res.push(b.property('init', b.identifier('getInitialState'), initialStateFn));
                    }

                    if (body)
                        body.forEach(function (stmt) {
                            if (n.ExpressionStatement.check(stmt) &&
                                n.AssignmentExpression.check(stmt.expression) &&
                                n.MemberExpression.check(stmt.expression.left) &&
                                n.ThisExpression.check(stmt.expression.left.object)
                            ) {
                                setInitialState(stmt.expression.left.property, stmt.expression.right);
                                return;
                            }
                            initialStateFn.body.body.push(stmt);
                        });
                }

                function isThis(node) {
                    while (node.MemberExpression.check(node.object))
                        node = node.object;
                    return n.ThisExpression.check(node);
                }
            }
        }

        function transform_View(clazz) {

            var fnDestroy = b.functionDeclaration(b.identifier('destroyView'), [], b.blockStatement([]));
            var fnLink = b.functionExpression(b.identifier('createLink'), [], b.blockStatement([]));
            var fnUnlink = b.functionDeclaration(b.identifier('destroyLink'), [], b.blockStatement([]));

            var obj = b.objectExpression([
        b.property('init', b.identifier('createLink'), fnLink)
        //b.property('init', b.identifier('AddLoggedInlistenner'), fnDestroy),
        //b.property('init', b.identifier('RemoveLoggedInlistenner'), fnDestroy),
    ]);

            var private_vars = b.variableDeclaration('var', [
            b.variableDeclarator(b.identifier('references'), b.literal(1)),
        b.variableDeclarator(b.identifier('view'), null)
    ]);

            return b.functionDeclaration(clazz.id, [], b.blockStatement([
        private_vars,
    b.returnStatement(obj),
        fnUnlink,
        fnCreate(),
        fnDestroy
    ]));

            function fnCreate() {
                var initialStateObj, initialStateFn;

                var reactClass = b.objectExpression(clazz.body.body.reduce(function (res, member) {
                    if (n.ClassProperty.check(member)) {
                        defineInitialStateFn(res);
                        setInitialState(member.key, b.identifier('undefined'));
                    } else {
                        assert.ok(member.type == n.MethodDefinition);
                        assert.ok(!member.static);
                        if (member.key.name == 'constructor') {
                            defineInitialStateFn(res, member.value.body.body);
                        } else
                            res.push(b.property('init', member.key, member.value));
                    }
                    return res;
                }, []));
                var assign_view = b.expressionStatement(b.assignmentExpression('=', b.identifier('view'),
                    b.callExpression(
                        b.memberExpression(
                            b.identifier('React'),
                            b.identifier('createComponent'), false), [reactClass])));
                return b.functionDeclaration(b.identifier('createView'), [], b.blockStatement([

                    assign_view
                ]));

                function setInitialState(identifier, value) {
                    assert(n.Identifier.check(identifier));
                    for (var i = 0; i < initialStateObj.properties.length; i++) {
                        var p = initialStateObj.properties[i];
                        if (p.key.name == identifier.name) {
                            assert(n.Identifier.check(p.value) && p.value.name == 'undefined');
                            p.value = value;
                            return;
                        }
                    }
                    initialStateObj.properties.push(b.property('init', identifier, value));
                }

                function defineInitialStateFn(res, body) {
                    if (!initialStateFn) {
                        initialStateObj = b.objectExpression([]);

                        initialStateFn = b.functionExpression(b.identifier('getInitialState'), [],
                            b.blockStatement([
                    var private_vars = b.variableDeclaration('var', [
                       b.variableDeclarator(b.identifier('state'), initialStateObj)
                    ]);
                    b.returnStatement(initialStateObj)]));

                        res.push(b.property('init', b.identifier('getInitialState'), initialStateFn));
                    }

                    if (body)
                        body.forEach(function (stmt) {
                            if (n.ExpressionStatement.check(stmt) &&
                                n.AssignmentExpression.check(stmt.expression) &&
                                n.MemberExpression.check(stmt.expression.left) &&
                                n.ThisExpression.check(stmt.expression.left.object)
                            ) {
                                setInitialState(stmt.expression.left.property, stmt.expression.right);
                                return;
                            }
                            initialStateFn.body.body.push(stmt);
                        });
                }

                function isThis(node) {
                    while (node.MemberExpression.check(node.object))
                        node = node.object;
                    return n.ThisExpression.check(node);
                }
            }
        }
